import{_ as e,c as a,o as i,a9 as l}from"./chunks/framework.C_6YpzP3.js";const v=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"notes/300_vue2/100_index.md","filePath":"notes/300_vue2/100_index.md"}'),t={name:"notes/300_vue2/100_index.md"},o=l('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p>现代前端框架</p><h2 id="历史背景" tabindex="-1">历史背景 <a class="header-anchor" href="#历史背景" aria-label="Permalink to &quot;历史背景&quot;">​</a></h2><p>纯Html -&gt; Jsp -&gt; JQuery -&gt; Vue</p><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><h3 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h3><ul><li>Model：模型层，处理数据逻辑</li><li>View：视图层，展示UI</li><li>ViewModel：视图模型层，Model和View的通信桥梁</li></ul><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p>组件化是将HTML、JS、CSS抽象出来，作用有：</p><ol><li>低耦合</li><li>调试方便</li><li>提高可维护性</li></ol><h3 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h3><ul><li>v-if： 是否渲染</li><li>v-for： 列表渲染</li><li>v-bind： 属性绑定</li><li>v-on： 事件绑定</li><li>v-model：双向数据绑定</li></ul><h3 id="vue-vs-jquery" tabindex="-1">Vue vs JQuery <a class="header-anchor" href="#vue-vs-jquery" aria-label="Permalink to &quot;Vue vs JQuery&quot;">​</a></h3><ul><li>操作DOM：Vue可以不用关注，JQuery需要频繁操作</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span></span></span></code></pre></div>',15),s=[o];function r(n,d,h,u,c,_){return i(),a("div",null,s)}const m=e(t,[["render",r]]);export{v as __pageData,m as default};
