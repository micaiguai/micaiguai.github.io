import{_ as a,a as t,b as e,c as r,d as i,e as l,f as o,g as s,h as n,i as d,j as c}from"./chunks/image-12.Ci6hEzMX.js";import{_ as h,c as m,o as _,a4 as p}from"./chunks/framework.DtKRdLJw.js";const C=JSON.parse('{"title":"AI","description":"","frontmatter":{},"headers":[],"relativePath":"notes/120000_面试题/200_ai大模型/index.md","filePath":"notes/120000_面试题/200_ai大模型/index.md"}'),u={name:"notes/120000_面试题/200_ai大模型/index.md"},g=p('<h1 id="ai" tabindex="-1">AI <a class="header-anchor" href="#ai" aria-label="Permalink to &quot;AI&quot;">​</a></h1><h2 id="aigc" tabindex="-1">AIGC <a class="header-anchor" href="#aigc" aria-label="Permalink to &quot;AIGC&quot;">​</a></h2><p><code>AIGC</code>（AI Generated Content）是AI生成的内容。</p><h2 id="生成式ai" tabindex="-1">生成式AI <a class="header-anchor" href="#生成式ai" aria-label="Permalink to &quot;生成式AI&quot;">​</a></h2><p>生成式AI（generative AI）所生成的内容即为<code>AIGC</code>。</p><h2 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><p><img src="'+a+'" alt="alt text"></p><ol><li>AI：计算机模拟人类的智能</li><li>机器学习：不通过编程，而是通过代码自己学习来实现决策</li></ol><ul><li>监督学习：给出多个带有正确输出值的输入值。最终模型能在给出新的输入值时得到正确输出值。监督学习分为： <img src="'+t+'" alt="alt text"><ul><li>分类：把数据划分不同类别。例如区分猫狗</li><li>回归：对数值进行预测。例如预测房价</li></ul></li><li>非监督学习：给出的只有输入值。最终模型能自主发现模式或规律，将相似的输入值分组 <img src="'+e+'" alt="alt text"><ul><li>聚类：将相似的输入值分组。例如文章分类</li></ul></li><li>强化学习：模型在行动后，通过反馈来学习。 <img src="'+r+'" alt="alt text"></li></ul><ol start="3"><li>深度学习：使用神经网络模拟人脑处理信息的方式，由多个神经元组成。分为输入层、隐藏层、输出层。输入层主要是获取信息，隐藏层主要是处理信息获取特征，输出层主要是输出信息。 <img src="'+i+'" alt="alt text"></li><li>生成式AI：是深度学习的一种应用。利用神经网络识别现有内容，生成新的内容。</li><li>大语言模型（Large Language Models）：是深度学习的一种应用。用于处理自然语言数据。 <img src="'+l+'" alt="alt text"></li></ol><h2 id="生成式ai和大语言模型" tabindex="-1">生成式AI和大语言模型 <a class="header-anchor" href="#生成式ai和大语言模型" aria-label="Permalink to &quot;生成式AI和大语言模型&quot;">​</a></h2><p>两者<strong>互不包含</strong><img src="'+o+'" alt="alt text"></p><h2 id="大语言模型" tabindex="-1">大语言模型 <a class="header-anchor" href="#大语言模型" aria-label="Permalink to &quot;大语言模型&quot;">​</a></h2><p>大语言模型是做<strong>自然语言处理</strong>的模型。具体任务可以是<strong>生成</strong>、<strong>分类</strong>、<strong>总结</strong>、<strong>改写</strong>等。 如何理解大语言模型的大？<strong>训练数据量大</strong>和<strong>参数数量大</strong>。可以执行的任务比单个小模型多。</p><h2 id="attention-is-all-you-need" tabindex="-1">Attention Is All You Need <a class="header-anchor" href="#attention-is-all-you-need" aria-label="Permalink to &quot;Attention Is All You Need&quot;">​</a></h2><p>谷歌发布了一篇<code>Attention Is All You Need</code>的文章。里面提到了<code>Transformer</code>架构，这改变了自然语言处理的方式。</p><h2 id="rnn" tabindex="-1">RNN <a class="header-anchor" href="#rnn" aria-label="Permalink to &quot;RNN&quot;">​</a></h2><p>在<code>Transformer</code>诞生之前，自然语言采用的是循环神经网络<code>RNN</code>（Recurrent Neural Network）。 <img src="'+s+'" alt="alt text"> 缺点：</p><ul><li>需要上一步骤的隐藏状态，无法并行执行。</li><li>难以捕获长距离的语义关系</li></ul><h2 id="transformer" tabindex="-1">Transformer <a class="header-anchor" href="#transformer" aria-label="Permalink to &quot;Transformer&quot;">​</a></h2><p><code>Transformer</code>利用了<strong>自注意力机制</strong>和<strong>位置编码</strong>，解决了上述缺点。 <img src="'+n+'" alt="alt text"></p><h2 id="注意力机制" tabindex="-1">注意力机制 <a class="header-anchor" href="#注意力机制" aria-label="Permalink to &quot;注意力机制&quot;">​</a></h2><p>获取当前词关联的其它词的自注意力权重，匹配更合适的词。 <img src="'+d+'" alt="alt text"></p><h2 id="位置编码" tabindex="-1">位置编码 <a class="header-anchor" href="#位置编码" aria-label="Permalink to &quot;位置编码&quot;">​</a></h2><p>将位置向量和词向量合并，交给神经网络。实现并行执行。 <img src="'+c+'" alt="alt text"></p><h2 id="gpt实现原理" tabindex="-1">GPT实现原理 <a class="header-anchor" href="#gpt实现原理" aria-label="Permalink to &quot;GPT实现原理&quot;">​</a></h2><p>通过预测语句下一个生成的词，类似于谷歌搜索。</p><h2 id="transformer实现原理" tabindex="-1">Transformer实现原理 <a class="header-anchor" href="#transformer实现原理" aria-label="Permalink to &quot;Transformer实现原理&quot;">​</a></h2><p><code>Transformer</code>包含一个编码器和一个解码器。 执行顺序：</p><ol><li>token化</li><li>通过嵌入编码获取词向量</li><li>通过位置编码获取位置向量</li><li>通过多头自注意力机制获取当前词关联的其它词的自注意力权重</li><li>通过前馈神经网络增强表达能力</li><li>将结果传入解码器</li><li>将<code>Transformer</code>生成的结果传给解码器</li><li>通过掩码多头自注意力机制获取当前词关联的其它词的自注意力权重</li><li>将结果和编码器的结果再次通过多头自注意力机制获取当前词关联的其它词的自注意力权重</li><li>通过前馈神经网络增强表达能力</li><li>通过<code>leaner</code>和<code>softmax</code>获取关联词概率的概率分布</li></ol><h2 id="gpt实现原理-1" tabindex="-1">gpt实现原理 <a class="header-anchor" href="#gpt实现原理-1" aria-label="Permalink to &quot;gpt实现原理&quot;">​</a></h2><ol><li>通过大量的文本数据训练出基座模型</li><li>通过监督微调，喂对话数据给模型，训练模型</li><li>训练一个奖励模型</li><li>微调基座模型通过奖励模型强化学习</li></ol>',32),f=[g];function x(b,q,A,I,P,k){return _(),m("div",null,f)}const G=h(u,[["render",x]]);export{C as __pageData,G as default};
