import{_ as a,o as s,c as e,R as i}from"./chunks/framework.j--13Jkl.js";const y=JSON.parse('{"title":"router","description":"","frontmatter":{},"headers":[],"relativePath":"300_vue2/200_router.md","filePath":"300_vue2/200_router.md"}'),h={name:"300_vue2/200_router.md"},t=i(`<h1 id="router" tabindex="-1">router <a class="header-anchor" href="#router" aria-label="Permalink to &quot;router&quot;">​</a></h1><h2 id="spa" tabindex="-1">SPA <a class="header-anchor" href="#spa" aria-label="Permalink to &quot;SPA&quot;">​</a></h2><blockquote><p>一些应用在前端需要具有丰富的交互性、较深的会话和复杂的状态逻辑。构建这类应用的最佳方法是使用这样一种架构：Vue 不仅控制整个页面，还负责处理抓取新数据，并在无需重新加载的前提下处理页面切换。这种类型的应用通常称为单页应用 (Single-Page application，缩写为 SPA)。</p></blockquote><h2 id="hash和history的比较" tabindex="-1">hash和history的比较 <a class="header-anchor" href="#hash和history的比较" aria-label="Permalink to &quot;hash和history的比较&quot;">​</a></h2><h3 id="共同点" tabindex="-1">共同点 <a class="header-anchor" href="#共同点" aria-label="Permalink to &quot;共同点&quot;">​</a></h3><ul><li>改变<code>url</code>时，都可以在无需重新加载的前提下处理页面切换</li></ul><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><ul><li><code>hash</code>模式下的<code>url</code>有<code>#</code>，<code>history</code>模式下则没有</li><li>刷新页面时，<code>hash</code>模式下请求不含<code>hash</code>值的<code>url</code>的静态资源，<code>history</code>模式下请求完整的<code>url</code>的静态资源（如果没有配置这个<code>url</code>的资源会导致<code>404</code>）</li><li><code>hash</code>的原理是监听<code>hashchange</code>事件，<code>history</code>的原理是监听<code>popstate</code>事件和调用<code>window.history.pushState</code>和<code>window.history.replaceState</code>方法</li></ul><h2 id="hash和history的原理" tabindex="-1">hash和history的原理 <a class="header-anchor" href="#hash和history的原理" aria-label="Permalink to &quot;hash和history的原理&quot;">​</a></h2><h3 id="hash原理" tabindex="-1">hash原理 <a class="header-anchor" href="#hash原理" aria-label="Permalink to &quot;hash原理&quot;">​</a></h3><p>核心原理是利用了<code>hashchange</code>事件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hashchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当手动改变地址栏地址时</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // http://127.0.0.1:5500/playground/#old -&gt; http://127.0.0.1:5500/playground/#new</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // output: http://127.0.0.1:5500/playground/#old</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.oldURL)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // output: http://127.0.0.1:5500/playground/#new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.newURL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="history原理" tabindex="-1">history原理 <a class="header-anchor" href="#history原理" aria-label="Permalink to &quot;history原理&quot;">​</a></h3>`,13),o=[t];function l(n,r,d,c,p,k){return s(),e("div",null,o)}const E=a(h,[["render",l]]);export{y as __pageData,E as default};
